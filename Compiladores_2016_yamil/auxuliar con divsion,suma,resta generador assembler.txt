public void GenerarAssemblerSuma(Terceto t,PrintWriter arc) throws IOException{
		if(!t.getOperando1().isTerceto()){ //es un token
			if(!t.getOperando2().isTerceto()){ //es un token
				//son los 2 token
				Token t1= (Token) t.getOperando1();
				Token t2= (Token) t.getOperando2();
				Integer registro=obtenerRegistroLibre();
				if(registro==null)
					System.out.println("No hay registro disponible");
				else{
//					System.out.println("registro obtenido: " + registro + " para suma");
					
				registrosLibres[registro]=false;
				t.setRegistro(registro);
				
				String operando1=t.getOperando1().getLexema();
				String uso1 = Compilador.T_simbolos.get(t1.getClaveTablaSimboloToken()).getUso();
				String operando2=t.getOperando2().getLexema();
				String uso2 = Compilador.T_simbolos.get(t2.getClaveTablaSimboloToken()).getUso();
				String nombreReg = getNombreRegistro(registro);
				
				if (Compilador.T_simbolos.get(t1.getClaveTablaSimboloToken()).getToken() == 257)						
						arc.append("MOV "+nombreReg+"X, "+uso1+operando1 + "\r\n");						
				else{
					
					if (Compilador.T_simbolos.get(((Token) t.getOperando1()).getClaveTablaSimboloToken()).getTipo() == "Integer"){
						if(operando1.codePointAt(0)==95){
							  String valor1=operando1.substring(2, operando1.length());
							  arc.append("MOV "+nombreReg+"X, " + "_in"+valor1+ "\r\n");
						  }
						 else
							  arc.append("MOV "+nombreReg+"X, "+"_i" +operando1+ "\r\n");
					}else
						 arc.append("MOV "+nombreReg+"X, "+"_ui" +operando1+ "\r\n");
				}
				
				if (Compilador.T_simbolos.get(t2.getClaveTablaSimboloToken()).getToken() == 257)						
					arc.append("ADD "+nombreReg+"X, "+uso2+operando2 + "\r\n");
				else{
					if (Compilador.T_simbolos.get(((Token) t.getOperando2()).getClaveTablaSimboloToken()).getTipo() == "Integer"){
						if(operando2.codePointAt(0)==95){
							  String valor2=operando2.substring(2, operando2.length());
							  arc.append("ADD "+nombreReg+"X, _in"+valor2 + "\r\n");
						  }
						  else
							  arc.append("ADD "+nombreReg+"X, _i"+operando2 + "\r\n");
					}
					else
						 arc.append("ADD "+nombreReg+"X, "+"_ui" +operando2+ "\r\n");
				}			
			}

		}
		else{ //primero operando Token y segundo Terceto
			
			String lexemaTerceto=t.getOperando2().getLexemaGeneradorNumero();
			int nroterceto = (Integer.parseInt(lexemaTerceto.substring(1, lexemaTerceto.length() - 1)));
			int registroOperando2=listaTercetos.get(nroterceto).getRegistro();
			t.setRegistro(registroOperando2);
			String nombreReg = getNombreRegistro(registroOperando2);
			String operando1=t.getOperando1().getLexema();
		//nuevo
			Token t1= (Token) t.getOperando1();
			if (Compilador.T_simbolos.get(t1.getClaveTablaSimboloToken()).getToken() == 257)					
				arc.append("ADD "+nombreReg+"X, "+Compilador.T_simbolos.get(t1.getClaveTablaSimboloToken()).getUso()+operando1 + "\r\n");
			else{
				if (Compilador.T_simbolos.get(((Token) t.getOperando1()).getClaveTablaSimboloToken()).getTipo() == "Integer"){
					if(operando1.codePointAt(0)==95){
						String valor1=operando1.substring(2, operando1.length());
					  arc.append("ADD "+nombreReg+"X, _in"+valor1 + "\r\n");
				  }
				  else
					  arc.append("ADD "+nombreReg+"X, _i"+operando1 + "\r\n");
				}
				else
					 arc.append("ADD "+nombreReg+"X, "+"_ui" +operando1+ "\r\n");
			}
				
			 
			}
		}
		else{ //primer Operando es un Terceto
			if(!t.getOperando2().isTerceto()){ //es un token
				
				String lexemaTerceto=t.getOperando1().getLexemaGeneradorNumero();
				int nroterceto = (Integer.parseInt(lexemaTerceto.substring(1, lexemaTerceto.length() - 1)));
				int registroOperando1=listaTercetos.get(nroterceto).getRegistro();
				t.setRegistro(registroOperando1);
				String nombreReg = getNombreRegistro(registroOperando1);
				String operando2=t.getOperando2().getLexema();
				//nuevo	
				Token t2= (Token) t.getOperando2();
				if (Compilador.T_simbolos.get(t2.getClaveTablaSimboloToken()).getToken() == 257){					
					arc.append("ADD "+nombreReg+"X, "+Compilador.T_simbolos.get(t2.getClaveTablaSimboloToken()).getUso()+operando2 + "\r\n");
				}
				else{
					if (Compilador.T_simbolos.get(((Token) t.getOperando2()).getClaveTablaSimboloToken()).getTipo() == "Integer"){
						if(operando2.codePointAt(0)==95){
							String valor2=operando2.substring(2, operando2.length());
						  arc.append("ADD "+nombreReg+"X, _in"+valor2 + "\r\n");
					  }
					  else
						  arc.append("ADD "+nombreReg+"X, _i"+operando2 + "\r\n");
					}
					else
						 arc.append("ADD "+nombreReg+"X, "+"_ui" +operando2+ "\r\n");
				}
			}
			else{ //los dos son Tercetos
				String lexemaTercetoOperando1=t.getOperando1().getLexemaGeneradorNumero();
				int nrotercetoOperando1 = (Integer.parseInt(lexemaTercetoOperando1.substring(1, lexemaTercetoOperando1.length() - 1)));
				int registroOperando1=listaTercetos.get(nrotercetoOperando1).getRegistro();
				t.setRegistro(registroOperando1);
				String nombreRegOperando1 = getNombreRegistro(registroOperando1);
				
				String lexemaTercetoOperando2=t.getOperando2().getLexemaGeneradorNumero();
				int nrotercetoOperando2 = (Integer.parseInt(lexemaTercetoOperando2.substring(1, lexemaTercetoOperando2.length() - 1)));
				int registroOperando2=listaTercetos.get(nrotercetoOperando2).getRegistro();
				String nombreRegOperando2 = getNombreRegistro(registroOperando2);
				
				arc.append("ADD "+nombreRegOperando1+"X, "+nombreRegOperando2+"X" + "\r\n");
				registrosLibres[registroOperando2] = true;
			}
			
		}
		if(t.getTipo()=="Integer")
			arc.append("JO OVERFLOWSUMA" + "\r\n");	 
		else
			arc.append("JC OVERFLOWSUMA" + "\r\n");	 
	}

	
	public void GenerarAssemblerResta(Terceto t,PrintWriter arc ) throws IOException{
		if(!(t.getOperando1().isTerceto())&& !(t.getOperando2().isTerceto())){
			//son 2 variables y o cte 
			//situacion 1 (-,Variable,Variable)
			
			Token t1= (Token) t.getOperando1();
			Token t2= (Token) t.getOperando2();
			
			int nroRegistroLibre=obtenerRegistroLibre();
			String nombreRegistroLibre=getNombreRegistro(nroRegistroLibre);
			registrosLibres[nroRegistroLibre] = false;
			t.setRegistro(nroRegistroLibre);
		
			String operando1=t.getOperando1().getLexema();
			String uso1 = Compilador.T_simbolos.get(t1.getClaveTablaSimboloToken()).getUso();
			String operando2=t.getOperando2().getLexema();
			String uso2 = Compilador.T_simbolos.get(t2.getClaveTablaSimboloToken()).getUso();
			
		if (Compilador.T_simbolos.get(t1.getClaveTablaSimboloToken()).getToken() == 257)						
				arc.append("MOV "+nombreRegistroLibre+"X, "+uso1+operando1 + "\r\n");						
		else{
			
			if (Compilador.T_simbolos.get(((Token) t.getOperando1()).getClaveTablaSimboloToken()).getTipo() == "Integer"){
				if(operando1.codePointAt(0)==95){
					  String valor1=operando1.substring(2, operando1.length());
					  arc.append("MOV "+nombreRegistroLibre+"X, " + "_in"+valor1+ "\r\n");
				  }
				 else
					  arc.append("MOV "+nombreRegistroLibre+"X, "+"_i" +operando1+ "\r\n");
			}else
				 arc.append("MOV "+nombreRegistroLibre+"X, "+"_ui" +operando1+ "\r\n");
		}
		
		if (Compilador.T_simbolos.get(t2.getClaveTablaSimboloToken()).getToken() == 257)						
			arc.append("SUB "+nombreRegistroLibre+"X, "+uso2+operando2 + "\r\n");
		else{
			if (Compilador.T_simbolos.get(((Token) t.getOperando2()).getClaveTablaSimboloToken()).getTipo() == "Integer"){
				if(operando2.codePointAt(0)==95){
					  String valor2=operando2.substring(2, operando2.length());
					  arc.append("SUB "+nombreRegistroLibre+"X, _in"+valor2 + "\r\n");
				  }
				  else
					  arc.append("SUB "+nombreRegistroLibre+"X, _i"+operando2 + "\r\n");
			}
			else
				 arc.append("SUB "+nombreRegistroLibre+"X, "+"_ui" +operando2+ "\r\n");
		}
			
				
		}
		else
		if((t.getOperando1().isTerceto())&& !(t.getOperando2().isTerceto())){
			//situacion 2 (-,Registro,Variable)
			
			String NroTercetoLexemaOperando1=t.getOperando1().getLexemaGeneradorNumero();
			int nroTercetoOperando1=	(Integer.parseInt(NroTercetoLexemaOperando1.substring(1,NroTercetoLexemaOperando1.length()-1)));	
			int nroRegistroTerceto=listaTercetos.get(nroTercetoOperando1).getRegistro();		
			String nombreRegistroTerceto=getNombreRegistro(nroRegistroTerceto);
			
			
			Token t2= (Token) t.getOperando2();
			String operando2=t2.getLexema();
			String uso2 = Compilador.T_simbolos.get(t2.getClaveTablaSimboloToken()).getUso();
			
			if (Compilador.T_simbolos.get(t2.getClaveTablaSimboloToken()).getToken() == 257){					
				arc.append("SUB "+nombreRegistroTerceto+"X, "+uso2+operando2 + "\r\n");
			}
			else{
				if (Compilador.T_simbolos.get(((Token) t.getOperando2()).getClaveTablaSimboloToken()).getTipo() == "Integer"){
					if(operando2.codePointAt(0)==95){
						String valor2=operando2.substring(2, operando2.length());
					  arc.append("SUB "+nombreRegistroTerceto+"X, _in"+valor2 + "\r\n");
				  }
				  else
					  arc.append("SUB "+nombreRegistroTerceto+"X, _i"+operando2 + "\r\n");
				}
				else
					 arc.append("SUB "+nombreRegistroTerceto+"X, "+"_ui" +operando2+ "\r\n");
			}		
			t.setRegistro(nroRegistroTerceto);
		}
		else
		if((t.getOperando1().isTerceto())&& (t.getOperando2().isTerceto())){
			//situacion 3 (-,Registro,Registro)
			
			String NroTercetoLexemaOperando1=t.getOperando1().getLexemaGeneradorNumero();
			int nroTercetoOperando1=	(Integer.parseInt(NroTercetoLexemaOperando1.substring(1,NroTercetoLexemaOperando1.length()-1)));	
			int nroRegistroTercetoOperando1=listaTercetos.get(nroTercetoOperando1).getRegistro();		
			String nombreRegistroTercetoOperando1=getNombreRegistro(nroRegistroTercetoOperando1);
						
			String NroTercetoLexemaOperando2=t.getOperando2().getLexemaGeneradorNumero();
			int nroTercetoOperando2=	(Integer.parseInt(NroTercetoLexemaOperando2.substring(1,NroTercetoLexemaOperando2.length()-1)));	
			int nroRegistroTercetoOperando2=listaTercetos.get(nroTercetoOperando2).getRegistro();		
			String nombreRegistroTercetoOperando2=getNombreRegistro(nroRegistroTercetoOperando2);
			
			t.setRegistro(nroRegistroTercetoOperando1);
			arc.append("SUB "+nombreRegistroTercetoOperando1+"X, "+nombreRegistroTercetoOperando2+"X" + "\r\n");
			registrosLibres[nroRegistroTercetoOperando2] = true;		
		}
		else
		if(!(t.getOperando1().isTerceto())&& (t.getOperando2().isTerceto())){
		//situacion 4b (-,Variable,Registro)
					
			int nroRegistroLibre=obtenerRegistroLibre();
			String nombreRegistroLibre=getNombreRegistro(nroRegistroLibre);
			registrosLibres[nroRegistroLibre] = false;
			t.setRegistro(nroRegistroLibre);
		
			Token t1= (Token) t.getOperando1();		
			String operando1=t1.getLexema();
			String uso1 = Compilador.T_simbolos.get(t1.getClaveTablaSimboloToken()).getUso();
						
			if (Compilador.T_simbolos.get(t1.getClaveTablaSimboloToken()).getToken() == 257)						
					arc.append("MOV "+nombreRegistroLibre+"X, "+uso1+operando1 + "\r\n");						
			else{
				
				if (Compilador.T_simbolos.get(((Token) t.getOperando1()).getClaveTablaSimboloToken()).getTipo() == "Integer"){
					if(operando1.codePointAt(0)==95){
						  String valor1=operando1.substring(2, operando1.length());
						  arc.append("MOV "+nombreRegistroLibre+"X, " + "_in"+valor1+ "\r\n");
					  }
					 else
						  arc.append("MOV "+nombreRegistroLibre+"X, "+"_i" +operando1+ "\r\n");
				}else
					 arc.append("MOV "+nombreRegistroLibre+"X, "+"_ui" +operando1+ "\r\n");
			}			
			String NroTercetoLexemaOperando2=t.getOperando2().getLexemaGeneradorNumero();
			int nroTercetoOperando2=	(Integer.parseInt(NroTercetoLexemaOperando2.substring(1,NroTercetoLexemaOperando2.length()-1)));	
			int nroRegistroTercetoOperando2=listaTercetos.get(nroTercetoOperando2).getRegistro();		
			String nombreRegistroTercetoOperando2=getNombreRegistro(nroRegistroTercetoOperando2);
			
			arc.append("SUB "+nombreRegistroLibre+"X, "+nombreRegistroTercetoOperando2+"X" + "\r\n");
			registrosLibres[nroRegistroTercetoOperando2] = true;			
			
		}	
		else
		System.out.println("no entra por la ninguna de las restas");
	}
	
	
		public void GenerarAssemblerDivisionEspecial(Terceto t,PrintWriter arc, String Operador ) throws IOException{
	
		//hago el chequeo de la division por cero
		if(t.getOperando2().isTerceto()){ //es un terceto
			
			String NroTercetoLexemaOperando2=t.getOperando2().getLexemaGeneradorNumero();
			int nroTercetoOperando2=	(Integer.parseInt(NroTercetoLexemaOperando2.substring(1,NroTercetoLexemaOperando2.length()-1)));	
			int nroRegistroTercetoOperando2=listaTercetos.get(nroTercetoOperando2).getRegistro();		
			String nombreRegistroTercetoOperando2=getNombreRegistro(nroRegistroTercetoOperando2);	
			arc.append("CMP "+nombreRegistroTercetoOperando2+"X, 0" + "\r\n");
			arc.append("JE DIVCERO" + "\r\n");
		}
		else{ //es un token
			Token t2= (Token) t.getOperando2();
			int nroRegistroLibre=obtenerRegistroLibre();
			String nombreRegistroLibre=getNombreRegistro(nroRegistroLibre);				
			String operando2=t.getOperando2().getLexema();
			if (Compilador.T_simbolos.get(t2.getClaveTablaSimboloToken()).getToken() == 257){ //es un id			
				String uso2 = Compilador.T_simbolos.get(t2.getClaveTablaSimboloToken()).getUso();
				arc.append("MOV "+nombreRegistroLibre+"X, "+uso2+operando2 + "\r\n");				
			}
			else{
				//verico si el tipo de cte			
				if (Compilador.T_simbolos.get(t2.getClaveTablaSimboloToken()).getTipo() == "Integer"){
					if(operando2.codePointAt(0)==95){
						  String valor1=operando2.substring(2, operando2.length());
						  arc.append("MOV "+nombreRegistroLibre+"X, " + "_in"+valor1+ "\r\n");
					  }
					 else
						  arc.append("MOV "+nombreRegistroLibre+"X, "+"_i" +operando2+ "\r\n");
				}else
					 arc.append("MOV "+nombreRegistroLibre+"X, "+"_ui" +operando2+ "\r\n");
				
			}
			arc.append("CMP "+nombreRegistroLibre+"X, 0" + "\r\n");
			arc.append("JE DIVCERO" + "\r\n");
		}
		
		
		
		
		
		
		//verifico la situacion y opero		
		
		
		if(!(t.getOperando1().isTerceto())&& !(t.getOperando2().isTerceto())){			 
			//situacion 1 (/,Variable,Variable)
			
			Token t1= (Token) t.getOperando1();
			Token t2= (Token) t.getOperando2();
			
			int nroRegistroLibre=obtenerRegistroLibre();
			String nombreRegistroLibre=getNombreRegistro(nroRegistroLibre);
			registrosLibres[nroRegistroLibre] = false;
			t.setRegistro(nroRegistroLibre);
		
			String operando1=t1.getLexema();
			String uso1 = Compilador.T_simbolos.get(t1.getClaveTablaSimboloToken()).getUso();
			String operando2=t2.getLexema();
			String uso2 = Compilador.T_simbolos.get(t2.getClaveTablaSimboloToken()).getUso();
			
			
			if (Compilador.T_simbolos.get(t1.getClaveTablaSimboloToken()).getToken() == 257)						
				arc.append("MOV "+"AX, "+uso1+operando1 + "\r\n");						
			else{			
			if (Compilador.T_simbolos.get(((Token) t.getOperando1()).getClaveTablaSimboloToken()).getTipo() == "Integer"){
				if(operando1.codePointAt(0)==95){
					  String valor1=operando1.substring(2, operando1.length());
					  arc.append("MOV "+"AX, " + "_in"+valor1+ "\r\n");
				  }
				 else
					  arc.append("MOV "+"AX, "+"_i" +operando1+ "\r\n");
			}
			else
				 arc.append("MOV "+"AX, "+"_ui" +operando1+ "\r\n");
			}
			//Extiendo el signo en DX:AX
			arc.append("CWD "+"\r\n");
			
			if (Compilador.T_simbolos.get(t2.getClaveTablaSimboloToken()).getToken() == 257)						
				arc.append("MOV "+nombreRegistroLibre+"X, "+uso2+operando2 + "\r\n");
			else{
				if (Compilador.T_simbolos.get(((Token) t.getOperando2()).getClaveTablaSimboloToken()).getTipo() == "Integer"){
					if(operando2.codePointAt(0)==95){
					  String valor2=operando2.substring(2, operando2.length());
					  arc.append("MOV "+nombreRegistroLibre+"X, _in"+valor2 + "\r\n");
					}
					else
					  arc.append("MOV "+nombreRegistroLibre+"X, _i"+operando2 + "\r\n");
				}
				else
					arc.append("MOV "+nombreRegistroLibre+"X, "+"_ui" +operando2+ "\r\n");
			}
			//hago la operacion
			arc.append(Operador+nombreRegistroLibre+"X, "+"\r\n");
		}
		else
			
			
			
		if((t.getOperando1().isTerceto())&& !(t.getOperando2().isTerceto())){
			//situacion 2 (/,Registro,Variable)
			
			String NroTercetoLexemaOperando1=t.getOperando1().getLexemaGeneradorNumero();
			int nroTercetoOperando1=	(Integer.parseInt(NroTercetoLexemaOperando1.substring(1,NroTercetoLexemaOperando1.length()-1)));	
			int nroRegistroTerceto=listaTercetos.get(nroTercetoOperando1).getRegistro();		
			String nombreRegistroTerceto=getNombreRegistro(nroRegistroTerceto);
			
			
			Token t2= (Token) t.getOperando2();
			String operando2=t2.getLexema();
			String uso2 = Compilador.T_simbolos.get(t2.getClaveTablaSimboloToken()).getUso();
			
			Integer registroDiv=obtenerRegistroLibre();
			String nombreRegDispobible= getNombreRegistro(registroDiv);
			
			
			arc.append("MOV "+"AX, "+nombreRegistroTerceto+ "\r\n");
			//Extiendo el signo en DX:AX
			arc.append("CWD "+"\r\n");
			if (Compilador.T_simbolos.get(t2.getClaveTablaSimboloToken()).getToken() == 257){				
			
				arc.append("MOV "+nombreRegDispobible+"X, "+uso2+operando2 + "\r\n");				
				arc.append(Operador+nombreRegDispobible+"X, "+"\r\n");				
			
			}
			else{
				if (Compilador.T_simbolos.get(((Token) t.getOperando2()).getClaveTablaSimboloToken()).getTipo() == "Integer"){
					if(operando2.codePointAt(0)==95){
						String valor2=operando2.substring(2, operando2.length());												
						arc.append("MOV "+nombreRegDispobible+"X, _in"+valor2 + "\r\n");				
						arc.append(Operador+nombreRegDispobible+"X, "+"\r\n");				
					
				  }
				  else{
					  //arc.append(Operador+nombreRegistroTerceto+"X, _i"+operando2 + "\r\n");
					  	arc.append("MOV "+nombreRegDispobible+"X, _i"+operando2 + "\r\n");				
					  	arc.append(Operador+nombreRegDispobible+"X, "+"\r\n");
					  
				  }  
				}
				else{
					//arc.append(Operador+nombreRegistroTerceto+"X, "+"_ui" +operando2+ "\r\n");
					arc.append("MOV "+nombreRegDispobible+"X, _ui"+operando2 + "\r\n");				
				  	arc.append(Operador+nombreRegDispobible+"X, "+"\r\n");
				}	
			}
			//guardo el resultado en el registro del terceto
			arc.append("MOV "+nombreRegistroTerceto+", AX "+ "\r\n");
			t.setRegistro(nroRegistroTerceto);
		}
		else
			
			
			
		if((t.getOperando1().isTerceto())&& (t.getOperando2().isTerceto())){
			//situacion 3 (-,Registro,Registro)
			/*
			 //Este es un caso especial de que justo sea A el registro del terceto y al haber movido el valor se pierda
			if(nombreRegDispobible.equals("A")) {
			
			}			 
			 
			 */
			String NroTercetoLexemaOperando1=t.getOperando1().getLexemaGeneradorNumero();
			int nroTercetoOperando1=	(Integer.parseInt(NroTercetoLexemaOperando1.substring(1,NroTercetoLexemaOperando1.length()-1)));	
			int nroRegistroTercetoOperando1=listaTercetos.get(nroTercetoOperando1).getRegistro();		
			String nombreRegistroTercetoOperando1=getNombreRegistro(nroRegistroTercetoOperando1);
						
			String NroTercetoLexemaOperando2=t.getOperando2().getLexemaGeneradorNumero();
			int nroTercetoOperando2=	(Integer.parseInt(NroTercetoLexemaOperando2.substring(1,NroTercetoLexemaOperando2.length()-1)));	
			int nroRegistroTercetoOperando2=listaTercetos.get(nroTercetoOperando2).getRegistro();		
			String nombreRegistroTercetoOperando2=getNombreRegistro(nroRegistroTercetoOperando2);
			
			
			arc.append("MOV "+"AX, "+nombreRegistroTercetoOperando1+ "\r\n");
			//Extiendo el signo en DX:AX
			arc.append("CWD "+"\r\n");
			
			 //Este es un caso especial capaz que es de gusto
			if(nombreRegistroTercetoOperando2.equals("A")) //DIVIDO POR AUX
				arc.append(Operador+"@auxAx" + "\r\n");
			else	
			if(nombreRegistroTercetoOperando2.equals("D")) //DIVIDO POR AUX
				arc.append(Operador+"@auxDx" + "\r\n");
			else //divido normal
				arc.append(Operador+nombreRegistroTercetoOperando2+"X" + "\r\n");
			
			
			t.setRegistro(nroRegistroTercetoOperando1);
			
			registrosLibres[nroRegistroTercetoOperando2] = true;		
		}
		else
			
			
			
			
		if(!(t.getOperando1().isTerceto())&& (t.getOperando2().isTerceto())){
		//situacion 4b (-,Variable,Registro)
					
			int nroRegistroLibre=obtenerRegistroLibre();
			String nombreRegistroLibre=getNombreRegistro(nroRegistroLibre);
			registrosLibres[nroRegistroLibre] = false;
			t.setRegistro(nroRegistroLibre);
		
			Token t1= (Token) t.getOperando1();		
			String operando1=t1.getLexema();
			String uso1 = Compilador.T_simbolos.get(t1.getClaveTablaSimboloToken()).getUso();
						
			if (Compilador.T_simbolos.get(t1.getClaveTablaSimboloToken()).getToken() == 257)						
					arc.append("MOV "+"AX, "+uso1+operando1 + "\r\n");						
			else{
				
				if (Compilador.T_simbolos.get(((Token) t.getOperando1()).getClaveTablaSimboloToken()).getTipo() == "Integer"){
					if(operando1.codePointAt(0)==95){
						  String valor1=operando1.substring(2, operando1.length());
						  arc.append("MOV "+"AX, " + "_in"+valor1+ "\r\n");
					  }
					 else
						  arc.append("MOV "+"AX, "+"_i" +operando1+ "\r\n");
				}else
					 arc.append("MOV "+"AX, "+"_ui" +operando1+ "\r\n");
			}			
			String NroTercetoLexemaOperando2=t.getOperando2().getLexemaGeneradorNumero();
			int nroTercetoOperando2=	(Integer.parseInt(NroTercetoLexemaOperando2.substring(1,NroTercetoLexemaOperando2.length()-1)));	
			int nroRegistroTercetoOperando2=listaTercetos.get(nroTercetoOperando2).getRegistro();		
			String nombreRegistroTercetoOperando2=getNombreRegistro(nroRegistroTercetoOperando2);
			
			//Extiendo el signo en DX:AX
			arc.append("CWD "+"\r\n");
			//arc.append(Operador+nombreRegistroTercetoOperando2+"X" + "\r\n");
			 //Este es un caso especial capaz que es de gusto
			if(nombreRegistroTercetoOperando2.equals("A")) //DIVIDO POR AUX
				arc.append(Operador+"@auxAx" + "\r\n");
			else	
			if(nombreRegistroTercetoOperando2.equals("D")) //DIVIDO POR AUX
				arc.append(Operador+"@auxDx" + "\r\n");
			else //divido normal
				arc.append(Operador+nombreRegistroTercetoOperando2+"X" + "\r\n");
			arc.append("MOV "+nombreRegistroLibre+"X, " +"AX"+ "\r\n");
			
			registrosLibres[nroRegistroTercetoOperando2] = true;			
			
		}	
	}
	
	
		public void GenerarAssemblerDivision(Terceto t,PrintWriter arc ) throws IOException{
		//el dividendo debe estar en DX,AX por lo tanto hay que verificar que no esten usados y en casos de estar usados usar una varialbe auxilar rpara guardar el resultado
		//Si dx esta usado lo voy a hacer cero para que no influya en el resultado
		//En AX queda el cociente que es lo que nos interesa 
		//En dx queda el resto
	
		boolean DisponibleAX=false;
		boolean DisponibleDX=false;
		if (registrosLibres[0]) { //esta disponible Ax
			t.setRegistro(0);
			registrosLibres[0] = false;
			DisponibleAX=true;
			if (registrosLibres[3]) { //esta disponible DX
				registrosLibres[3] = false;
				DisponibleDX=true;
			}
			else{ //esta disponible AX y NO esta disponible DX
				  arc.append("MOV @auxDx, DX"+ "\r\n");
				  arc.append("MOV DX, 0"+ "\r\n");
			}
		}	
		else{ //NO esta disponible AX
			if (registrosLibres[3]) { //esta disponible DX
				registrosLibres[3] = false;
				DisponibleDX=true;
				 arc.append("MOV @auxAx, AX"+ "\r\n");
				 arc.append("MOV DX, 0"+ "\r\n");
			}
			else{ //NO esta disponible AX y NO esta disponible DX
				arc.append("MOV @auxAx, AX"+ "\r\n"); 
				arc.append("MOV @auxDx, DX"+ "\r\n");				 
			}
		}
		//guarde en variables auxiliares en caso de ser necesarios los valores de AX y DX
		
		//Opero normal		
		if(t.getTipo()=="Integer")
			GenerarAssemblerDivisionEspecial(t,arc,"IDIV ");
		else
			GenerarAssemblerDivisionEspecial(t,arc,"DIV ");
		
		
		
		
		
		//Reestablesco los valores de los registros con las variables auxiliares
		if((DisponibleAX)&&(!DisponibleDX))
			arc.append("MOV DX, @auxDx"+ "\r\n");			
		else
		if(!(DisponibleAX)&&(DisponibleDX))
			arc.append("MOV AX, @auxAx"+ "\r\n");
		else
		if(!(DisponibleAX)&&!(DisponibleDX)){
			arc.append("MOV AX, @auxAx"+ "\r\n");
			arc.append("MOV DX, @auxDx"+ "\r\n");
		}
		
	}
	