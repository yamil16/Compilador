programa

integer a, b,e,f;
uinteger c, d,g,h;
integer matrix x[_i3][_i4] {_i5, _i2, _i1; _i3, _i4, _i6}; &&@1asd
uinteger matrix y[_i3][_i4] {_ui5, _ui2, _ui1; _ui3, _ui4, _ui6}; &&@1asd
allow uinteger to integer;
{
x[_i2][_i1] := _i-4;
if(x[_i2][_i1] = _i-4) print("OK_matriz_integer"); endif;
y[_i2][_i1] := _ui4;
if(y[_i2][_i1] = _ui4) print("OK_matriz_uinteger"); endif;


b:= _i1;
f:=_i0;
for (a := _i1; b < a; a--){ 
	for (e := _i1; b < e; e--) 
		x[a][e]:=f;
	f:=f+_i1;
}
b:=_i0;
if(x[_i1][_i1]=_i0)
	 print("OK funciona asignacion doble FOR"); 
endif;
	






a := _i1 + _i1;
b := _i2 / a;
c := _ui2;
d := _ui1;

h:=_i3;
e := _i9;
h := a * b + a * b-- + a-- * b + a-- * a--+a/b+a/h--+h--/a+h--/h--;
if (h = e)
	print ("es 9 integer");
else
	print ("NO es 9 integer");
endif;
h:=_i3;
e := _i8;
h := c * d + c * d-- + c-- * d + c-- * d--+c/d+c/h--+h--/c+h--/h--;
if (h = e)
	print ("es 8 uuuinteger");
else
	print ("NO es 8 uuuinteger");
endif;



x[_i1][_i1]:=_i2;
x[_i1][_i2]:=_i1;


h := x[_i1][_i1]* x[_i1][_i2] ;
e := _i2;
if (h = e)
	print ("es 2 matriz var var MULTIPLICACIONES INTEGER");
else
	print ("NO es 2 matriz var var MULTIPLICACIONES INTEGER");
endif;

h:= x[_i1][_i1]-- * x[_i1][_i2];
e:=_i1;
if (h = e)
	print ("es 1 matriz reg var MULTIPLICACIONES INTEGER");
else
	print ("NO es 1 matriz reg var MULTIPLICACIONES INTEGER");
endif;
h:=x[_i1][_i1]-- * x[_i1][_i1]--;
e:=_i1;
if (h = e)
	print ("es 1 matriz reg reg MULTIPLICACIONES INTEGER");
else
	print ("NO es 1 matriz reg reg MULTIPLICACIONES INTEGER");
endif;
h:=x[_i1][_i1]* x[_i1][_i1]--;
e := _i2;
if (h = e)
	print ("es 2 matriz var reg MULTIPLICACIONES INTEGER");
else
	print ("NO es 2 matriz var reg  MULTIPLICACIONES INTEGER");
endif;

h:=x[_i1][_i1]* x[_i1][_i2]  +  x[_i1][_i1]-- * x[_i1][_i2] +  x[_i1][_i1]-- * x[_i1][_i1]-- + x[_i1][_i1]* x[_i1][_i1]--;
e := _i6;
if (h = e)
	print ("es 6 matriz completa  MULTIPLICACIONES INTEGER");
else
	print ("NO es 6 matriz completa MULTIPLICACIONES INTEGER");
endif;

y[_i1][_i1]:=_ui2;
y[_i1][_i2]:=_ui1;

h := y[_i1][_i1]* y[_i1][_i2] ;
e := _i2;
if (h = e)
	print ("es 2 matriz var var MULTIPLICACIONES UINTEGER");
else
	print ("NO es 2 matriz var var MULTIPLICACIONES UINTEGER");
endif;

h:= y[_i1][_i1]-- * y[_i1][_i2];
e:=_i1;
if (h = e)
	print ("es 1 matriz reg var MULTIPLICACIONES UINTEGER");
else
	print ("NO es 1 matriz reg var MULTIPLICACIONES UINTEGER");
endif;
h:=y[_i1][_i1]-- * y[_i1][_i1]--;
e:=_i1;
if (h = e)
	print ("es 1 matriz reg reg MULTIPLICACIONES UINTEGER");
else
	print ("NO es 1 matriz reg reg MULTIPLICACIONES UINTEGER");
endif;
h:=y[_i1][_i1]* y[_i1][_i1]--;
e := _i2;
if (h = e)
	print ("es 2 matriz var reg MULTIPLICACIONES UINTEGER");
else
	print ("NO es 2 matriz var reg MULTIPLICACIONES UINTEGER");
endif;


h := y[_i1][_i1]* y[_i1][_i2] +y[_i1][_i1]-- * y[_i1][_i2]+ y[_i1][_i1]-- * y[_i1][_i1]-- + y[_i1][_i1]* y[_i1][_i1]--;
e := _i6;
if (h = e)
	print ("es 6 matriz completa MULTIPLICACIONES UINTEGER");
else
	print ("NO es 6 matriz completa MULTIPLICACIONES UINTEGER no anda");
endif;







x[_i1][_i2]:=_i2;
x[_i1][_i1]:=_i1;


h := x[_i1][_i2] / x[_i1][_i1] ;
e := _i2;
if (h = e)
	print ("es 2 matriz var var DIVISION INTEGER");
else
	print ("NO es 2 matriz var var DIVISION INTEGER");
endif;

h:= x[_i1][_i2]-- / x[_i1][_i1];
e:=_i1;
if (h = e)
	print ("es 1 matriz reg var DIVISION INTEGER");
else
	print ("NO es 1 matriz reg var DIVISION INTEGER");
endif;
h:=x[_i1][_i2]-- / x[_i1][_i2]--;
e:=_i1;
if (h = e)
	print ("es 1 matriz reg reg DIVISION INTEGER");
else
	print ("NO es 1 matriz reg reg DIVISION INTEGER");
endif;
h:=x[_i1][_i2]/ x[_i1][_i2]--;
e := _i2;
if (h = e)
	print ("es 2 matriz var reg DIVISION INTEGER");
else
	print ("NO es 2 matriz var reg  DIVISION INTEGER");
endif;

h:=x[_i1][_i2] / x[_i1][_i1]  +  x[_i1][_i2]-- / x[_i1][_i1] + x[_i1][_i2]-- / x[_i1][_i2]-- + x[_i1][_i2]/ x[_i1][_i2]--;
e := _i6;
if (h = e)
	print ("es 6 matriz completa  DIVISION INTEGER");
else
	print ("NO es 6 matriz completa DIVISION INTEGER no anda");
endif;



y[_i1][_i1]:=_ui1;
y[_i1][_i2]:=_ui2;

h := y[_i1][_i2] / y[_i1][_i1] ;
e := _i2;
if (h = e)
	print ("es 2 matriz var var DIVISION UINTEGER");
else
	print ("NO es 2 matriz var var DIVISION UINTEGER");
endif;

h:= y[_i1][_i2]-- / y[_i1][_i1];
e:=_i1;
if (h = e)
	print ("es 1 matriz reg var DIVISION UINTEGER");
else
	print ("NO es 1 matriz reg var DIVISION UINTEGER");
endif;
h:=y[_i1][_i2]-- / y[_i1][_i2]--;
e:=_i1;
if (h = e)
	print ("es 1 matriz reg reg DIVISION UINTEGER");
else
	print ("NO es 1 matriz reg reg DIVISION UINTEGER");
endif;
h:=y[_i1][_i2]/ y[_i1][_i2]--;
e := _i2;
if (h = e)
	print ("es 2 matriz var reg DIVISION UINTEGER");
else
	print ("NO es 2 matriz var reg  DIVISION UINTEGER");
endif;

h:=y[_i1][_i2] / y[_i1][_i1]  +  y[_i1][_i2]-- / y[_i1][_i1] + y[_i1][_i2]-- / y[_i1][_i2]-- + y[_i1][_i2]/ y[_i1][_i2]--;
e := _i6;
if (h = e)
	print ("es 6 matriz completa  DIVISION UINTEGER");
else
	print ("NO es 6 matriz completa DIVISION UINTEGER no anda");
endif;


}